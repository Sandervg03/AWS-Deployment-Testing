name: CI - Deploy Lambda Functions

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Check out code with enough history to compare changes
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100

      # Find the previous commit to compare against for detecting changes
      - name: Get base commit for comparison
        id: get-base-commit
        run: |
          PREVIOUS_COMMIT=$(git rev-parse HEAD^1)
          echo "PREVIOUS_COMMIT=$PREVIOUS_COMMIT" >> $GITHUB_ENV
          echo "Using previous commit for comparison: $PREVIOUS_COMMIT"

      # Set up Node.js environment
      - uses: actions/setup-node@v3
        with:
          node-version: 22

      # Install all dependencies from root package.json
      - name: Root npm install
        run: npm ci
        env:
          CI: true

      # Set up AWS credentials for deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'eu-north-1' }}

      # Identify which files have changed since the previous commit
      - name: Get changed files
        id: changed-files
        run: |
          # Compare current commit with previous commit
          CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Save changed files to a file for easier processing
          echo "$CHANGED_FILES" > changed_files.txt

      # Find and deploy all modified Lambda functions
      - name: Find and deploy modified Lambda functions
        run: |
          set -euo pipefail
          
          DEPLOY_ERRORS=0
          
          # Get changed function directories excluding test folder changes
          # Only consider changes inside functions/<func_name>/ excluding tests
          CHANGED_FUNCTIONS=$(grep -E "^functions/[^/]+/" changed_files.txt | grep -v "^test/" | cut -d/ -f2 | sort -u)
          
          for FUNC_NAME in $CHANGED_FUNCTIONS; do
          FUNC_DIR="./functions/$FUNC_NAME"
        
          # Skip if function directory was deleted
          if [ ! -d "$FUNC_DIR" ]; then
          echo "Function directory $FUNC_DIR was deleted â€“ skipping deployment."
          continue
          fi
        
          echo "Checking function: $FUNC_NAME"
          
          # Skip if changes only in test folder inside this function (extra safety)
          # We already exclude test/ changes globally above, so this is optional
          
          # Check if metadata.json exists
          METADATA_FILE="$FUNC_DIR/metadata.json"
          if [ ! -f "$METADATA_FILE" ]; then
          echo "::error ::Missing metadata.json for function '$FUNC_NAME'"
          DEPLOY_ERRORS=1
          continue
          fi
        
          # Extract Lambda function name
          LAMBDA_FUNC_NAME=$(node -e "
          try {
          const meta = require('$METADATA_FILE');
          if (!meta.functionName) throw new Error('Missing functionName in metadata.json');
          console.log(meta.functionName);
          } catch (e) {
          console.error('Error loading metadata.json:', e.message);
          process.exit(1);
          }
          ")
        
          # Check if Lambda function exists on AWS
          if ! aws lambda get-function --function-name "$LAMBDA_FUNC_NAME" > /dev/null 2>&1; then
          echo "::error ::Lambda function '$LAMBDA_FUNC_NAME' does not exist in AWS, skipping deployment."
          DEPLOY_ERRORS=1
          continue
          fi
        
          echo "Deploying $LAMBDA_FUNC_NAME to AWS Lambda..."
        
          # Prepare deployment package
          mkdir -p deploy_temp
          cp -r "$FUNC_DIR"/* ./deploy_temp/
          cp -r ./node_modules ./deploy_temp/
        
          cd deploy_temp
          zip -r ../$FUNC_NAME.zip . -x "*.git*" "node_modules/*/test/*" "node_modules/*/docs/*"
          cd ..
        
          if ! aws lambda update-function-code --function-name="$LAMBDA_FUNC_NAME" --zip-file=fileb://$FUNC_NAME.zip; then
          echo "::error ::Failed to deploy $LAMBDA_FUNC_NAME"
          DEPLOY_ERRORS=1
          else
          echo "Successfully deployed $LAMBDA_FUNC_NAME"
          fi
        
          rm -f $FUNC_NAME.zip
          rm -rf deploy_temp
          done
          
          if [ $DEPLOY_ERRORS -ne 0 ]; then
          echo "::error ::One or more Lambda functions failed to deploy."
          exit 1
          fi
          
          echo "All Lambda deployments completed successfully."
