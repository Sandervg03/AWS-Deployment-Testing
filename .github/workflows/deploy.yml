name: CI - Deploy Lambda Functions

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100

      - name: Fetch remote default branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | sed 's/.*: //')
          git fetch origin "$DEFAULT_BRANCH" --depth=100

      - uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'eu-north-1' }}

      - name: Root npm install
        run: npm ci
        env:
          CI: true

      - name: Get changed files
        id: changed-files
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | sed 's/.*: //')
          echo "Default branch: $DEFAULT_BRANCH"

          CHANGED_FILES=$(git diff --name-only origin/"$DEFAULT_BRANCH"...HEAD)
          echo "Changed files: $CHANGED_FILES"
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Find and deploy modified Lambda functions
        run: |
          set -euo pipefail
          IFS=$'\n'
          for func_dir in functions/*/; do
            FUNC_NAME=$(basename "$func_dir")
            echo "Checking function: $FUNC_NAME"

            if echo "$CHANGED_FILES" | grep -q "^functions/$FUNC_NAME/" || \
               echo "$CHANGED_FILES" | grep -q "^test/$FUNC_NAME/" || \
               echo "$CHANGED_FILES" | grep -qE "^(package.json|package-lock.json|yarn.lock)"; then

              echo "Changes detected for $FUNC_NAME – preparing deployment..."

              METADATA_FILE="./functions/$FUNC_NAME/metadata.json"
              if [ ! -f "$METADATA_FILE" ]; then
                echo "::error ::Missing metadata.json for function '$FUNC_NAME'"
                exit 1
              fi

              LAMBDA_FUNC_NAME=$(node -e "
                try {
                  const meta = require('$METADATA_FILE');
                  if (!meta.functionName) throw new Error('Missing functionName in metadata.json');
                  console.log(meta.functionName);
                } catch (e) {
                  console.error('Error loading metadata.json:', e.message);
                  process.exit(1);
                }
              ")

              if ! aws lambda get-function --function-name "$LAMBDA_FUNC_NAME" > /dev/null 2>&1; then
                echo "::error ::Lambda function '$LAMBDA_FUNC_NAME' does not exist in AWS, skipping deployment."
                exit 1
              fi

              echo "Deploying $LAMBDA_FUNC_NAME to AWS Lambda..."

              cd "functions/$FUNC_NAME"
              zip -r deploy.zip . -x "*.git*" "node_modules/*/test/*" "node_modules/*/docs/*"
              aws lambda update-function-code --function-name="$LAMBDA_FUNC_NAME" --zip-file=fileb://deploy.zip
              rm deploy.zip
              cd "$GITHUB_WORKSPACE"
            else
              echo "No changes detected for $FUNC_NAME – skipping deployment."
            fi
          done
